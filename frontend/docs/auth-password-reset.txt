PASSWORD RESET FLOW DOCUMENTATION

FRONTEND COMPONENTS
------------------
1. src/features/Auth/ForgotPassword.tsx
   - Handles forgot password form
   - Shows success/error states
   - Uses AuthService for API calls

2. src/features/Auth/ResetPassword.tsx
   - Handles password reset form
   - Validates token from URL
   - Shows success/error states

3. src/services/AuthService.ts
   - Contains API methods:
     * requestPasswordReset()
     * resetPassword()

4. src/routes.tsx
   - Route definitions:
     * /forgot-password -> ForgotPassword
     * /reset-password/:token -> ResetPassword


FRONTEND ROUTES
--------------
/forgot-password        Form to request password reset
/reset-password/:token  Form to set new password using reset token


API ENDPOINTS
------------

1. Request Password Reset
   Endpoint: POST /identity-service/auth/forgot-password
   Description: Sends a password reset link to the user's email

   Request Body:
   {
     "email": "string"  // User's email address
   }

   Success Response (200 OK):
   {
     "message": "Password reset instructions sent to email"
   }

   Error Response (400 Bad Request):
   {
     "title": "Error message",
     "status": 400
   }


2. Reset Password
   Endpoint: POST /identity-service/auth/reset-password
   Description: Resets user's password using the token from email

   Request Body:
   {
     "token": "string",      // Reset token from email
     "newPassword": "string" // New password
   }

   Success Response (200 OK):
   {
     "message": "Password successfully reset"
   }

   Error Response (400 Bad Request):
   {
     "title": "Error message",
     "status": 400
   }


TESTING SCENARIOS
----------------
1. Forgot Password Flow:
   - Submit valid email -> Should show success message
   - Submit invalid email format -> Should show validation error
   - Submit non-existent email -> Should still show success message (security)
   - Submit empty email -> Should show validation error

2. Reset Password Flow:
   - Valid token + valid password -> Should reset and redirect to login
   - Invalid token -> Should show error message
   - Expired token -> Should show error message
   - Valid token + invalid password -> Should show validation error
   - Valid token + passwords don't match -> Should show validation error

Frontend Validation Rules:
------------------------
1. Email:
   - Required
   - Must be valid email format
   - Pattern: /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/

2. Password:
   - Required
   - Minimum 8 characters
   - Must match confirmation password

BACKEND REQUIREMENTS
------------------

Password Reset Token Requirements:
- Secure, random token generation
- 1-hour expiration time
- Single-use only
- Must be invalidated after:
  * Successful password reset
  * Token expiration
  * New reset link request

Email Requirements:
- Reset link format: /identity-service/reset-password/{token}
- Email must include:
  * Clear instructions
  * Reset link
  * Expiration time
  * Security advice
  * Support contact

Security Requirements:
1. Rate Limiting
   - 3 reset requests per email per hour
   - Include rate limit headers:
     X-RateLimit-Limit: 3
     X-RateLimit-Remaining: 2
     X-RateLimit-Reset: 3600

2. Token Security
   - Use cryptographically secure tokens
   - Store only hashed versions
   - Implement proper expiration

3. Password Validation
   - Minimum 8 characters
   - Validate password strength
   - Prevent reuse of recent passwords

4. Email Security
   - Only send to verified emails
   - Don't reveal if email exists
   - Use secure email service

Database Schema:
CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    token_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    used_at TIMESTAMP,
    UNIQUE(token_hash)
);

Error Handling:
Must handle these scenarios:
1. Invalid token
2. Expired token
3. Already used token
4. Invalid email format
5. Rate limit exceeded
6. Password validation failures
7. System errors

Email Template:
--------------
Subject: Password Reset Request - Triple Dart

Hi {user_name},

We received a request to reset your password for your Triple Dart account. 
Click the link below to set a new password:

{reset_link}

This link will expire in 1 hour.

If you didn't request this, please ignore this email or contact support if you have concerns.

Best regards,
Triple Dart Team

Security Headers:
---------------
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Strict-Transport-Security: max-age=31536000; includeSubDomains

Implementation Notes:
-------------------
1. Frontend implemented with React + TypeScript
2. Uses react-hook-form for form validation
3. Responsive design for all screen sizes
4. Error states handled with user-friendly messages
5. Loading states shown during API calls
6. Success states with clear next steps
7. Automatic redirect to login after successful reset 